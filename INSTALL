How to install MCUSim
---------------------

 This file contains an instruction about installing MCUSim from sources.

Prerequisites
-------------

 MCUSim is written in C99 on FreeBSD and macOS operating systems with
 POSIX.1-2001 in mind. CMake build system is required to generate build files
 for the various operating systems including GNU/Linux and Windows.

 libluajit (2.0 or above) should be installed in order to support Lua-based
 models. liblua (5.1 or above) can be used instead, but it may decrease
 a simulation peformance significantly.

 If you want to compile XSPICE library (mcusim.cm), the following software
 should also be installed:

	- GNU make
	- readline
	- bison and flex
	- X11 (Xaw, Xmu, Xext) headers and libs

 If you want to contribute to the project you will need the following
 software installed:

	- astyle (to check code formatting)
	- avr-libc (to compile AVR tests firmware)
	- srecord (to compile AVR tests firmware)
	- pkg-config (to find libraries)
	- cmocka (to run unit tests)
	- python (2.7 or above)
	- cppcheck (1.83 or above)

Install from tarball
--------------------

 This part covers installation from a release distribution
 (MCUSim-0.2.0.tar.gz, for example). You may download a tarball with the
 latest release version from http://mcusim.org.

 After downloading unpack it to a local directory:

        $ tar -xvf MCUSim-0.2.0.tar.gz

 Now change the directory to the top-level source one (where this INSTALL file
 can be found) and type:

        $ mkdir build
        $ cd build
        $ cmake .. && make

 There are optional steps to run tests and install a library of the simulator
 (libmsim), headers, default configuration file (mcusim.conf) and executable
 binary (mcusim):

	$ make tests
        $ sudo make install

 The default installation directory is /usr/local.
 See the section titled 'Advanced install' for instructions about additional
 arguments that can be passed to cmake to customize the build and installation.

 FreeBSD users may have to add "-I/usr/local/include" to the CFLAGS
 environment variable and "-L/usr/local/lib" to the LDFLAGS to let MCUSim find
 GNU readline headers and libraries if -DWITH_XSPICE option has been enabled.

Install from the git repository
-------------------------------

 This part covers installation from sources taken directly from the git
 repository. You may wish to follow this way if you want to use the most
 recent version of MCUSim with the latest features or contribute to the
 project.

 Clone repository using:

        $ git clone git@github.com:mcusim/MCUSim.git

 And follow the steps after tarball unpacking described above, in the
 'Install from tarball' section. There are options which can be passed to
 cmake during configuration step. You may read 'Advanced install'
 section to find these options described and additional instructions.

 If you want to code any feature and share a patch, please install pre-commit
 hooks from the repository root:

        $ ./scripts/install-hooks.sh

 They will check any changes in a commit to follow code format of the project
 and report violations on a per-file basis with the exact lines to adjust.

Advanced install
----------------

 These options can be provided to CMake during 'cmake ..' configuration step:

 -DCMAKE_BUILD_TYPE=Release|Debug

        Build a debug version of MCUSim. Debug symbols will be included into
        a binary and library of MCUSim. Note that the release version will be
        built by default.

 -DWITH_XSPICE=False|True

        Build MCUSim with XSPICE code model (i.e. mcusim.cm) library.
        It is a shared object statically linked with MCUSim which contains
        NGSpice models of the supported microcontrollers.

        Please, note that NGSpice tarball with source code will be patched and
        compiled to provide the library (see -DNGSPICE_TARBALL and
        -DNGSPICE_TARBALL_MD5 options also).

 -DWITH_LUA=False|True

        Build MCUSim with a standard Lua implementation (which affects
        simulation performance, but can be the only option available on some
        platforms).

        False value means that MCUSim will be using LuaJIT as a main Lua
        implementation. It is a default behavior.

 -DNGSPICE_MAKE=/usr/bin/make

        Build NGSpice using specified make utility. It should be GNU make.

 -DNGSPICE_TARBALL=/path/to/ngspice-XX.tar.gz

        A full path to the NGSpice tarball. This option is useful if you are
        going to use a custom tarball with NGSpice sources.

 -DNGSPICE_TARBALL_MD5=a11c1f99753934be7d60c0ab43821bbc

        MD5 hash of the NGSpice tarball provided via -DNGSPICE_TARBALL option.

 -DWITH_UNIT_TESTS=False|True

        Build MCUSim with unit tests (run by "make check").

	False value means that MCUSim will be built without unit tests.
	This is a default behavior.

Install directories
-------------------

 -DCMAKE_INSTALL_PREFIX=/usr/local

        Name of the directory to install MCUSim to.

 -DMSIM_BIN_DIR=bin

        Prefix to install binaries (and shared libraries on DLL platforms) to.
        It should be a relative path to form a full one
        <CMAKE_INSTALL_PREFIX>/<MSIM_BIN_DIR>.

 -DMSIM_LIB_DIR=lib

        Prefix to install shared libraries to (on non-DLL platforms).
        It should be a relative path to form a full one
        <CMAKE_INSTALL_PREFIX>/<MSIM_LIB_DIR>.

 -DMSIM_SLIB_DIR=lib

        Prefix to install static libraries to. It should be a relative path to
        form a full one <CMAKE_INSTALL_PREFIX>/<MSIM_SLIB_DIR>.

 -DMSIM_H_DIR=include

        Prefix to install headers to. It should be a relative path to
        form a full one <CMAKE_INSTALL_PREFIX>/<MSIM_H_DIR>.

 -DMSIM_CONF_DIR=etc

        Prefix to install configuration files to. It should be a relative path
        to form a full one <CMAKE_INSTALL_PREFIX>/<MSIM_CONF_DIR>.

 -DMSIM_SCRIPT_DIR=share/mcusim

        Prefix to install scripts and Lua models to. It should be a relative
        path to form a full one <CMAKE_INSTALL_PREFIX>/<MSIM_SCRIPT_DIR>.

 -DMSIM_EXAMPLE_DIR=share/mcusim

        Prefix to install examples to. It should be a relative
        path to form a full one <CMAKE_INSTALL_PREFIX>/<MSIM_EXAMPLE_DIR>.
