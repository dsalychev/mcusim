# Copyright (c) 2017, 2018,
# Dmitry Salychev <darkness.bsd@gmail.com>,
# Alexander Salychev <ppsalex@rambler.ru> et al.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# MCUSim configuration file of the AVR simulator
#
cmake_minimum_required(VERSION 3.2)
project(mcusim C)

# Version
set(MSIM_VERSION "0.1.68")

add_definitions(-DMSIM_VERSION="${MSIM_VERSION}")
add_subdirectory(scripts)
add_subdirectory(tests)

include(CheckFunctionExists)
include(CheckIncludeFiles)

# Simulator app name
set(MCUSIM "mcusim")

# Set flags here
if (CMAKE_BUILD_TYPE MATCHES Debug)
	message(STATUS "Debug version of mcusim ${MSIM_VERSION} will be built by default.")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DDEBUG")
	if (CMAKE_COMPILER_IS_GNUCC OR
	    ${CMAKE_C_COMPILER_ID} MATCHES "Clang")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -pedantic -std=iso9899:1999")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wshadow -Wpointer-arith -Wcast-qual")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wcast-align -Wstrict-prototypes")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wmissing-prototypes -Wconversion")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wsign-compare")
	endif()
else()
	message(STATUS "Release version of mcusim ${MSIM_VERSION} will be built.")
	message(STATUS "Set CMAKE_BUILD_TYPE=Debug to build a debug version.")
	if (CMAKE_COMPILER_IS_GNUCC OR
	    ${CMAKE_C_COMPILER_ID} MATCHES "Clang")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O2")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Wall -pedantic -std=iso9899:1999")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Wshadow -Wpointer-arith -Wcast-qual")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Wcast-align -Wstrict-prototypes")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Wmissing-prototypes -Wconversion")
		set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Wsign-compare")
	endif()
endif()

# Set sources here
set(MCUSIM_SRC		simcore.c
			simm8a.c
			simm328p.c
			simm328.c
			simm2560.c
			ihex.c
			getopt_long.c
			peripheral_lua.c
			peripheral_luaapi.c
			decoder.c
			avrsim.c
			gdb_rsp.c
			vcd_dump.c)

# Look for libraries, packages, etc.
find_package(Lua)

# Set target libraries here
set(TARGET_LIBS "")
if (LUA_FOUND AND
    ((LUA_VERSION_MAJOR EQUAL 5) OR (LUA_VERSION_MAJOR GREATER 5)) AND
    ((LUA_VERSION_MINOR EQUAL 2) OR (LUA_VERSION_MINOR GREATER 2)))
	add_definitions(-DLUA_FOUND=1 -DLUA_C89_NUMBERS)
	set(TARGET_LIBS ${TARGET_LIBS} ${LUA_LIBRARIES})
	message(STATUS "Support for Lua-based peripherals will be enabled")
else()
	message(STATUS "[!] Support for Lua-based peripherals will be disabled")
	message(STATUS "[!] Required Lua version is 5.2 or above")
endif()

# Check functions, include files here
if (NOT MSVC)
	check_function_exists(fmax RESULT)
	if (NOT RESULT)
		unset(RESULT)
		list(APPEND TARGET_LIBS -lm)
		message(STATUS "Math library added to the TARGET_LIBS")
	endif()
endif()
check_include_files(netdb.h HAVE_NETDB_H)
check_include_files("sys/socket.h" HAVE_SYS_SOCKET_H)
check_include_files(string.h HAVE_STRING_H)
check_include_files(fcntl.h HAVE_FCNTL_H)
check_include_files(unistd.h HAVE_UNISTD_H)
check_include_files(errno.h HAVE_ERRNO_H)
check_include_files(poll.h HAVE_POLL_H)
check_include_files(netinet/in.h HAVE_NETINET_IN_H)
if (NOT CYGWIN)
	check_include_files(netinet/tcp.h HAVE_NETINET_TCP_H)
	if (HAVE_NETDB_H AND
	    HAVE_SYS_SOCKET_H AND
	    HAVE_STRING_H AND
	    HAVE_FCNTL_H AND
	    HAVE_UNISTD_H AND
	    HAVE_ERRNO_H AND
	    HAVE_POLL_H AND
	    HAVE_NETINET_IN_H AND
	    HAVE_NETINET_TCP_H)
		add_definitions(-DMSIM_POSIX=1)
	endif()
else()
	# CMake cannot find netinet/tcp.h under CYGWIN and it's not
	# required, to be honest. Let me ignore this header silently.
	if (HAVE_NETDB_H AND
	    HAVE_SYS_SOCKET_H AND
	    HAVE_STRING_H AND
	    HAVE_FCNTL_H AND
	    HAVE_UNISTD_H AND
	    HAVE_ERRNO_H AND
	    HAVE_POLL_H AND
	    HAVE_NETINET_IN_H)
		add_definitions(-DMSIM_POSIX=1)
		add_definitions(-DMSIM_POSIX_CYGWIN=1)
	endif()
endif()
# END Check functions, include files here

# Define includes here
include_directories("include/")
if (LUA_FOUND)
	include_directories(${LUA_INCLUDE_DIR})
endif()

add_executable(${MCUSIM} ${MCUSIM_SRC})
target_link_libraries(${MCUSIM} ${TARGET_LIBS})

# Install mcusim and manual pages
install(TARGETS ${MCUSIM}
	DESTINATION bin)
